// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cliReq.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cliReq.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lspb {
class CliReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CliReq>
     _instance;
} _CliReq_default_instance_;

namespace protobuf_cliReq_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliReq, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliReq, moduleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliReq, methodid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliReq, clienterroom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliReq, cliinitover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliReq, clioperate_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CliReq)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CliReq_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cliReq.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::lspb::protobuf_lsEnum_2eproto::InitDefaults();
  ::lspb::protobuf_gameProto_2eproto::InitDefaults();
  _CliReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CliReq_default_instance_);_CliReq_default_instance_._instance.get_mutable()->clienterroom_ = const_cast< ::lspb::CliEnterRoom*>(
      ::lspb::CliEnterRoom::internal_default_instance());
  _CliReq_default_instance_._instance.get_mutable()->cliinitover_ = const_cast< ::lspb::CliInitOver*>(
      ::lspb::CliInitOver::internal_default_instance());
  _CliReq_default_instance_._instance.get_mutable()->clioperate_ = const_cast< ::lspb::CliOperate*>(
      ::lspb::CliOperate::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014cliReq.proto\022\004lspb\032\014lsEnum.proto\032\017game"
      "Proto.proto\"\331\001\n\006CliReq\022\016\n\006userId\030\001 \001(\005\022 "
      "\n\010moduleId\030\002 \001(\0162\016.lspb.ModuleId\022%\n\010meth"
      "odId\030\003 \001(\0162\023.lspb.ClientMsgType\022(\n\014cliEn"
      "terRoom\030e \001(\0132\022.lspb.CliEnterRoom\022&\n\013cli"
      "InitOver\030f \001(\0132\021.lspb.CliInitOver\022$\n\ncli"
      "Operate\030g \001(\0132\020.lspb.CliOperate*W\n\rClien"
      "tMsgType\022\023\n\017errorClientType\020\000\022\020\n\014cliEnte"
      "rRoom\020e\022\017\n\013cliInitOver\020f\022\016\n\ncliOperate\020g"
      "B\022\n\020org.bro.lssrv.pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cliReq.proto", &protobuf_RegisterTypes);
  ::lspb::protobuf_lsEnum_2eproto::AddDescriptors();
  ::lspb::protobuf_gameProto_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cliReq_2eproto

const ::google::protobuf::EnumDescriptor* ClientMsgType_descriptor() {
  protobuf_cliReq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cliReq_2eproto::file_level_enum_descriptors[0];
}
bool ClientMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CliReq::kUserIdFieldNumber;
const int CliReq::kModuleIdFieldNumber;
const int CliReq::kMethodIdFieldNumber;
const int CliReq::kCliEnterRoomFieldNumber;
const int CliReq::kCliInitOverFieldNumber;
const int CliReq::kCliOperateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CliReq::CliReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cliReq_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.CliReq)
}
CliReq::CliReq(const CliReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clienterroom()) {
    clienterroom_ = new ::lspb::CliEnterRoom(*from.clienterroom_);
  } else {
    clienterroom_ = NULL;
  }
  if (from.has_cliinitover()) {
    cliinitover_ = new ::lspb::CliInitOver(*from.cliinitover_);
  } else {
    cliinitover_ = NULL;
  }
  if (from.has_clioperate()) {
    clioperate_ = new ::lspb::CliOperate(*from.clioperate_);
  } else {
    clioperate_ = NULL;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&methodid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(methodid_));
  // @@protoc_insertion_point(copy_constructor:lspb.CliReq)
}

void CliReq::SharedCtor() {
  ::memset(&clienterroom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&methodid_) -
      reinterpret_cast<char*>(&clienterroom_)) + sizeof(methodid_));
  _cached_size_ = 0;
}

CliReq::~CliReq() {
  // @@protoc_insertion_point(destructor:lspb.CliReq)
  SharedDtor();
}

void CliReq::SharedDtor() {
  if (this != internal_default_instance()) delete clienterroom_;
  if (this != internal_default_instance()) delete cliinitover_;
  if (this != internal_default_instance()) delete clioperate_;
}

void CliReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CliReq::descriptor() {
  protobuf_cliReq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cliReq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CliReq& CliReq::default_instance() {
  protobuf_cliReq_2eproto::InitDefaults();
  return *internal_default_instance();
}

CliReq* CliReq::New(::google::protobuf::Arena* arena) const {
  CliReq* n = new CliReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CliReq::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.CliReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && clienterroom_ != NULL) {
    delete clienterroom_;
  }
  clienterroom_ = NULL;
  if (GetArenaNoVirtual() == NULL && cliinitover_ != NULL) {
    delete cliinitover_;
  }
  cliinitover_ = NULL;
  if (GetArenaNoVirtual() == NULL && clioperate_ != NULL) {
    delete clioperate_;
  }
  clioperate_ = NULL;
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&methodid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(methodid_));
  _internal_metadata_.Clear();
}

bool CliReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.CliReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lspb.ModuleId moduleId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_moduleid(static_cast< ::lspb::ModuleId >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lspb.ClientMsgType methodId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_methodid(static_cast< ::lspb::ClientMsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lspb.CliEnterRoom cliEnterRoom = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clienterroom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lspb.CliInitOver cliInitOver = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cliinitover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lspb.CliOperate cliOperate = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clioperate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.CliReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.CliReq)
  return false;
#undef DO_
}

void CliReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.CliReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // .lspb.ModuleId moduleId = 2;
  if (this->moduleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->moduleid(), output);
  }

  // .lspb.ClientMsgType methodId = 3;
  if (this->methodid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->methodid(), output);
  }

  // .lspb.CliEnterRoom cliEnterRoom = 101;
  if (this->has_clienterroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->clienterroom_, output);
  }

  // .lspb.CliInitOver cliInitOver = 102;
  if (this->has_cliinitover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->cliinitover_, output);
  }

  // .lspb.CliOperate cliOperate = 103;
  if (this->has_clioperate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->clioperate_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.CliReq)
}

::google::protobuf::uint8* CliReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.CliReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // .lspb.ModuleId moduleId = 2;
  if (this->moduleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->moduleid(), target);
  }

  // .lspb.ClientMsgType methodId = 3;
  if (this->methodid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->methodid(), target);
  }

  // .lspb.CliEnterRoom cliEnterRoom = 101;
  if (this->has_clienterroom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->clienterroom_, deterministic, target);
  }

  // .lspb.CliInitOver cliInitOver = 102;
  if (this->has_cliinitover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->cliinitover_, deterministic, target);
  }

  // .lspb.CliOperate cliOperate = 103;
  if (this->has_clioperate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->clioperate_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.CliReq)
  return target;
}

size_t CliReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.CliReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .lspb.CliEnterRoom cliEnterRoom = 101;
  if (this->has_clienterroom()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clienterroom_);
  }

  // .lspb.CliInitOver cliInitOver = 102;
  if (this->has_cliinitover()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cliinitover_);
  }

  // .lspb.CliOperate cliOperate = 103;
  if (this->has_clioperate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clioperate_);
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // .lspb.ModuleId moduleId = 2;
  if (this->moduleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->moduleid());
  }

  // .lspb.ClientMsgType methodId = 3;
  if (this->methodid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->methodid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CliReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.CliReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CliReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CliReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.CliReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.CliReq)
    MergeFrom(*source);
  }
}

void CliReq::MergeFrom(const CliReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.CliReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clienterroom()) {
    mutable_clienterroom()->::lspb::CliEnterRoom::MergeFrom(from.clienterroom());
  }
  if (from.has_cliinitover()) {
    mutable_cliinitover()->::lspb::CliInitOver::MergeFrom(from.cliinitover());
  }
  if (from.has_clioperate()) {
    mutable_clioperate()->::lspb::CliOperate::MergeFrom(from.clioperate());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.moduleid() != 0) {
    set_moduleid(from.moduleid());
  }
  if (from.methodid() != 0) {
    set_methodid(from.methodid());
  }
}

void CliReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.CliReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CliReq::CopyFrom(const CliReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.CliReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CliReq::IsInitialized() const {
  return true;
}

void CliReq::Swap(CliReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CliReq::InternalSwap(CliReq* other) {
  using std::swap;
  swap(clienterroom_, other->clienterroom_);
  swap(cliinitover_, other->cliinitover_);
  swap(clioperate_, other->clioperate_);
  swap(userid_, other->userid_);
  swap(moduleid_, other->moduleid_);
  swap(methodid_, other->methodid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CliReq::GetMetadata() const {
  protobuf_cliReq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cliReq_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CliReq

// int32 userId = 1;
void CliReq::clear_userid() {
  userid_ = 0;
}
::google::protobuf::int32 CliReq::userid() const {
  // @@protoc_insertion_point(field_get:lspb.CliReq.userId)
  return userid_;
}
void CliReq::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliReq.userId)
}

// .lspb.ModuleId moduleId = 2;
void CliReq::clear_moduleid() {
  moduleid_ = 0;
}
::lspb::ModuleId CliReq::moduleid() const {
  // @@protoc_insertion_point(field_get:lspb.CliReq.moduleId)
  return static_cast< ::lspb::ModuleId >(moduleid_);
}
void CliReq::set_moduleid(::lspb::ModuleId value) {
  
  moduleid_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliReq.moduleId)
}

// .lspb.ClientMsgType methodId = 3;
void CliReq::clear_methodid() {
  methodid_ = 0;
}
::lspb::ClientMsgType CliReq::methodid() const {
  // @@protoc_insertion_point(field_get:lspb.CliReq.methodId)
  return static_cast< ::lspb::ClientMsgType >(methodid_);
}
void CliReq::set_methodid(::lspb::ClientMsgType value) {
  
  methodid_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliReq.methodId)
}

// .lspb.CliEnterRoom cliEnterRoom = 101;
bool CliReq::has_clienterroom() const {
  return this != internal_default_instance() && clienterroom_ != NULL;
}
void CliReq::clear_clienterroom() {
  if (GetArenaNoVirtual() == NULL && clienterroom_ != NULL) delete clienterroom_;
  clienterroom_ = NULL;
}
const ::lspb::CliEnterRoom& CliReq::clienterroom() const {
  const ::lspb::CliEnterRoom* p = clienterroom_;
  // @@protoc_insertion_point(field_get:lspb.CliReq.cliEnterRoom)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::CliEnterRoom*>(
      &::lspb::_CliEnterRoom_default_instance_);
}
::lspb::CliEnterRoom* CliReq::mutable_clienterroom() {
  
  if (clienterroom_ == NULL) {
    clienterroom_ = new ::lspb::CliEnterRoom;
  }
  // @@protoc_insertion_point(field_mutable:lspb.CliReq.cliEnterRoom)
  return clienterroom_;
}
::lspb::CliEnterRoom* CliReq::release_clienterroom() {
  // @@protoc_insertion_point(field_release:lspb.CliReq.cliEnterRoom)
  
  ::lspb::CliEnterRoom* temp = clienterroom_;
  clienterroom_ = NULL;
  return temp;
}
void CliReq::set_allocated_clienterroom(::lspb::CliEnterRoom* clienterroom) {
  delete clienterroom_;
  clienterroom_ = clienterroom;
  if (clienterroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.CliReq.cliEnterRoom)
}

// .lspb.CliInitOver cliInitOver = 102;
bool CliReq::has_cliinitover() const {
  return this != internal_default_instance() && cliinitover_ != NULL;
}
void CliReq::clear_cliinitover() {
  if (GetArenaNoVirtual() == NULL && cliinitover_ != NULL) delete cliinitover_;
  cliinitover_ = NULL;
}
const ::lspb::CliInitOver& CliReq::cliinitover() const {
  const ::lspb::CliInitOver* p = cliinitover_;
  // @@protoc_insertion_point(field_get:lspb.CliReq.cliInitOver)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::CliInitOver*>(
      &::lspb::_CliInitOver_default_instance_);
}
::lspb::CliInitOver* CliReq::mutable_cliinitover() {
  
  if (cliinitover_ == NULL) {
    cliinitover_ = new ::lspb::CliInitOver;
  }
  // @@protoc_insertion_point(field_mutable:lspb.CliReq.cliInitOver)
  return cliinitover_;
}
::lspb::CliInitOver* CliReq::release_cliinitover() {
  // @@protoc_insertion_point(field_release:lspb.CliReq.cliInitOver)
  
  ::lspb::CliInitOver* temp = cliinitover_;
  cliinitover_ = NULL;
  return temp;
}
void CliReq::set_allocated_cliinitover(::lspb::CliInitOver* cliinitover) {
  delete cliinitover_;
  cliinitover_ = cliinitover;
  if (cliinitover) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.CliReq.cliInitOver)
}

// .lspb.CliOperate cliOperate = 103;
bool CliReq::has_clioperate() const {
  return this != internal_default_instance() && clioperate_ != NULL;
}
void CliReq::clear_clioperate() {
  if (GetArenaNoVirtual() == NULL && clioperate_ != NULL) delete clioperate_;
  clioperate_ = NULL;
}
const ::lspb::CliOperate& CliReq::clioperate() const {
  const ::lspb::CliOperate* p = clioperate_;
  // @@protoc_insertion_point(field_get:lspb.CliReq.cliOperate)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::CliOperate*>(
      &::lspb::_CliOperate_default_instance_);
}
::lspb::CliOperate* CliReq::mutable_clioperate() {
  
  if (clioperate_ == NULL) {
    clioperate_ = new ::lspb::CliOperate;
  }
  // @@protoc_insertion_point(field_mutable:lspb.CliReq.cliOperate)
  return clioperate_;
}
::lspb::CliOperate* CliReq::release_clioperate() {
  // @@protoc_insertion_point(field_release:lspb.CliReq.cliOperate)
  
  ::lspb::CliOperate* temp = clioperate_;
  clioperate_ = NULL;
  return temp;
}
void CliReq::set_allocated_clioperate(::lspb::CliOperate* clioperate) {
  delete clioperate_;
  clioperate_ = clioperate;
  if (clioperate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.CliReq.cliOperate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lspb

// @@protoc_insertion_point(global_scope)
