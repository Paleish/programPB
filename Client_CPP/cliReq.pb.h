// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cliReq.proto

#ifndef PROTOBUF_cliReq_2eproto__INCLUDED
#define PROTOBUF_cliReq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "lsEnum.pb.h"
#include "gameProto.pb.h"
// @@protoc_insertion_point(includes)
namespace lspb {
class CliReq;
class CliReqDefaultTypeInternal;
extern CliReqDefaultTypeInternal _CliReq_default_instance_;
}  // namespace lspb

namespace lspb {

namespace protobuf_cliReq_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cliReq_2eproto

enum ClientMsgType {
  errorClientType = 0,
  cliEnterRoom = 101,
  cliInitOver = 102,
  cliOperate = 103,
  ClientMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClientMsgType_IsValid(int value);
const ClientMsgType ClientMsgType_MIN = errorClientType;
const ClientMsgType ClientMsgType_MAX = cliOperate;
const int ClientMsgType_ARRAYSIZE = ClientMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMsgType_descriptor();
inline const ::std::string& ClientMsgType_Name(ClientMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMsgType_descriptor(), value);
}
inline bool ClientMsgType_Parse(
    const ::std::string& name, ClientMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMsgType>(
    ClientMsgType_descriptor(), name, value);
}
// ===================================================================

class CliReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lspb.CliReq) */ {
 public:
  CliReq();
  virtual ~CliReq();

  CliReq(const CliReq& from);

  inline CliReq& operator=(const CliReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CliReq(CliReq&& from) noexcept
    : CliReq() {
    *this = ::std::move(from);
  }

  inline CliReq& operator=(CliReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CliReq& default_instance();

  static inline const CliReq* internal_default_instance() {
    return reinterpret_cast<const CliReq*>(
               &_CliReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CliReq* other);
  friend void swap(CliReq& a, CliReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CliReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CliReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CliReq& from);
  void MergeFrom(const CliReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CliReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .lspb.CliEnterRoom cliEnterRoom = 101;
  bool has_clienterroom() const;
  void clear_clienterroom();
  static const int kCliEnterRoomFieldNumber = 101;
  const ::lspb::CliEnterRoom& clienterroom() const;
  ::lspb::CliEnterRoom* mutable_clienterroom();
  ::lspb::CliEnterRoom* release_clienterroom();
  void set_allocated_clienterroom(::lspb::CliEnterRoom* clienterroom);

  // .lspb.CliInitOver cliInitOver = 102;
  bool has_cliinitover() const;
  void clear_cliinitover();
  static const int kCliInitOverFieldNumber = 102;
  const ::lspb::CliInitOver& cliinitover() const;
  ::lspb::CliInitOver* mutable_cliinitover();
  ::lspb::CliInitOver* release_cliinitover();
  void set_allocated_cliinitover(::lspb::CliInitOver* cliinitover);

  // .lspb.CliOperate cliOperate = 103;
  bool has_clioperate() const;
  void clear_clioperate();
  static const int kCliOperateFieldNumber = 103;
  const ::lspb::CliOperate& clioperate() const;
  ::lspb::CliOperate* mutable_clioperate();
  ::lspb::CliOperate* release_clioperate();
  void set_allocated_clioperate(::lspb::CliOperate* clioperate);

  // int32 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // .lspb.ModuleId moduleId = 2;
  void clear_moduleid();
  static const int kModuleIdFieldNumber = 2;
  ::lspb::ModuleId moduleid() const;
  void set_moduleid(::lspb::ModuleId value);

  // .lspb.ClientMsgType methodId = 3;
  void clear_methodid();
  static const int kMethodIdFieldNumber = 3;
  ::lspb::ClientMsgType methodid() const;
  void set_methodid(::lspb::ClientMsgType value);

  // @@protoc_insertion_point(class_scope:lspb.CliReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lspb::CliEnterRoom* clienterroom_;
  ::lspb::CliInitOver* cliinitover_;
  ::lspb::CliOperate* clioperate_;
  ::google::protobuf::int32 userid_;
  int moduleid_;
  int methodid_;
  mutable int _cached_size_;
  friend struct protobuf_cliReq_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CliReq

// int32 userId = 1;
inline void CliReq::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 CliReq::userid() const {
  // @@protoc_insertion_point(field_get:lspb.CliReq.userId)
  return userid_;
}
inline void CliReq::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliReq.userId)
}

// .lspb.ModuleId moduleId = 2;
inline void CliReq::clear_moduleid() {
  moduleid_ = 0;
}
inline ::lspb::ModuleId CliReq::moduleid() const {
  // @@protoc_insertion_point(field_get:lspb.CliReq.moduleId)
  return static_cast< ::lspb::ModuleId >(moduleid_);
}
inline void CliReq::set_moduleid(::lspb::ModuleId value) {
  
  moduleid_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliReq.moduleId)
}

// .lspb.ClientMsgType methodId = 3;
inline void CliReq::clear_methodid() {
  methodid_ = 0;
}
inline ::lspb::ClientMsgType CliReq::methodid() const {
  // @@protoc_insertion_point(field_get:lspb.CliReq.methodId)
  return static_cast< ::lspb::ClientMsgType >(methodid_);
}
inline void CliReq::set_methodid(::lspb::ClientMsgType value) {
  
  methodid_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliReq.methodId)
}

// .lspb.CliEnterRoom cliEnterRoom = 101;
inline bool CliReq::has_clienterroom() const {
  return this != internal_default_instance() && clienterroom_ != NULL;
}
inline void CliReq::clear_clienterroom() {
  if (GetArenaNoVirtual() == NULL && clienterroom_ != NULL) delete clienterroom_;
  clienterroom_ = NULL;
}
inline const ::lspb::CliEnterRoom& CliReq::clienterroom() const {
  const ::lspb::CliEnterRoom* p = clienterroom_;
  // @@protoc_insertion_point(field_get:lspb.CliReq.cliEnterRoom)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::CliEnterRoom*>(
      &::lspb::_CliEnterRoom_default_instance_);
}
inline ::lspb::CliEnterRoom* CliReq::mutable_clienterroom() {
  
  if (clienterroom_ == NULL) {
    clienterroom_ = new ::lspb::CliEnterRoom;
  }
  // @@protoc_insertion_point(field_mutable:lspb.CliReq.cliEnterRoom)
  return clienterroom_;
}
inline ::lspb::CliEnterRoom* CliReq::release_clienterroom() {
  // @@protoc_insertion_point(field_release:lspb.CliReq.cliEnterRoom)
  
  ::lspb::CliEnterRoom* temp = clienterroom_;
  clienterroom_ = NULL;
  return temp;
}
inline void CliReq::set_allocated_clienterroom(::lspb::CliEnterRoom* clienterroom) {
  delete clienterroom_;
  clienterroom_ = clienterroom;
  if (clienterroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.CliReq.cliEnterRoom)
}

// .lspb.CliInitOver cliInitOver = 102;
inline bool CliReq::has_cliinitover() const {
  return this != internal_default_instance() && cliinitover_ != NULL;
}
inline void CliReq::clear_cliinitover() {
  if (GetArenaNoVirtual() == NULL && cliinitover_ != NULL) delete cliinitover_;
  cliinitover_ = NULL;
}
inline const ::lspb::CliInitOver& CliReq::cliinitover() const {
  const ::lspb::CliInitOver* p = cliinitover_;
  // @@protoc_insertion_point(field_get:lspb.CliReq.cliInitOver)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::CliInitOver*>(
      &::lspb::_CliInitOver_default_instance_);
}
inline ::lspb::CliInitOver* CliReq::mutable_cliinitover() {
  
  if (cliinitover_ == NULL) {
    cliinitover_ = new ::lspb::CliInitOver;
  }
  // @@protoc_insertion_point(field_mutable:lspb.CliReq.cliInitOver)
  return cliinitover_;
}
inline ::lspb::CliInitOver* CliReq::release_cliinitover() {
  // @@protoc_insertion_point(field_release:lspb.CliReq.cliInitOver)
  
  ::lspb::CliInitOver* temp = cliinitover_;
  cliinitover_ = NULL;
  return temp;
}
inline void CliReq::set_allocated_cliinitover(::lspb::CliInitOver* cliinitover) {
  delete cliinitover_;
  cliinitover_ = cliinitover;
  if (cliinitover) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.CliReq.cliInitOver)
}

// .lspb.CliOperate cliOperate = 103;
inline bool CliReq::has_clioperate() const {
  return this != internal_default_instance() && clioperate_ != NULL;
}
inline void CliReq::clear_clioperate() {
  if (GetArenaNoVirtual() == NULL && clioperate_ != NULL) delete clioperate_;
  clioperate_ = NULL;
}
inline const ::lspb::CliOperate& CliReq::clioperate() const {
  const ::lspb::CliOperate* p = clioperate_;
  // @@protoc_insertion_point(field_get:lspb.CliReq.cliOperate)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::CliOperate*>(
      &::lspb::_CliOperate_default_instance_);
}
inline ::lspb::CliOperate* CliReq::mutable_clioperate() {
  
  if (clioperate_ == NULL) {
    clioperate_ = new ::lspb::CliOperate;
  }
  // @@protoc_insertion_point(field_mutable:lspb.CliReq.cliOperate)
  return clioperate_;
}
inline ::lspb::CliOperate* CliReq::release_clioperate() {
  // @@protoc_insertion_point(field_release:lspb.CliReq.cliOperate)
  
  ::lspb::CliOperate* temp = clioperate_;
  clioperate_ = NULL;
  return temp;
}
inline void CliReq::set_allocated_clioperate(::lspb::CliOperate* clioperate) {
  delete clioperate_;
  clioperate_ = clioperate;
  if (clioperate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.CliReq.cliOperate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace lspb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lspb::ClientMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lspb::ClientMsgType>() {
  return ::lspb::ClientMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cliReq_2eproto__INCLUDED
