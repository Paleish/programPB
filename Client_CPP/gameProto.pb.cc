// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lspb {
class CliEnterRoomDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CliEnterRoom>
     _instance;
} _CliEnterRoom_default_instance_;
class SrvEnterRoomDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SrvEnterRoom>
     _instance;
} _SrvEnterRoom_default_instance_;
class BGameInitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BGameInit>
     _instance;
} _BGameInit_default_instance_;
class PlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo>
     _instance;
} _PlayerInfo_default_instance_;
class CliInitOverDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CliInitOver>
     _instance;
} _CliInitOver_default_instance_;
class SrvInitOverDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SrvInitOver>
     _instance;
} _SrvInitOver_default_instance_;
class BGameStartDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BGameStart>
     _instance;
} _BGameStart_default_instance_;
class BGameFrameDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BGameFrame>
     _instance;
} _BGameFrame_default_instance_;
class CliOperateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CliOperate>
     _instance;
} _CliOperate_default_instance_;

namespace protobuf_gameProto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliEnterRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliEnterRoom, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliEnterRoom, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrvEnterRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrvEnterRoom, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGameInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGameInit, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGameInit, plist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, startpoint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliInitOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrvInitOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGameFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGameFrame, fid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGameFrame, operlist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliOperate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliOperate, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliOperate, isfire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CliOperate, playerid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CliEnterRoom)},
  { 7, -1, sizeof(SrvEnterRoom)},
  { 13, -1, sizeof(BGameInit)},
  { 20, -1, sizeof(PlayerInfo)},
  { 28, -1, sizeof(CliInitOver)},
  { 33, -1, sizeof(SrvInitOver)},
  { 38, -1, sizeof(BGameStart)},
  { 43, -1, sizeof(BGameFrame)},
  { 50, -1, sizeof(CliOperate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CliEnterRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SrvEnterRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BGameInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CliInitOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SrvInitOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BGameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BGameFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CliOperate_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gameProto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CliEnterRoom_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CliEnterRoom_default_instance_);_SrvEnterRoom_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SrvEnterRoom_default_instance_);_BGameInit_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BGameInit_default_instance_);_PlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerInfo_default_instance_);_CliInitOver_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CliInitOver_default_instance_);_SrvInitOver_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SrvInitOver_default_instance_);_BGameStart_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BGameStart_default_instance_);_BGameFrame_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BGameFrame_default_instance_);_CliOperate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CliOperate_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017gameProto.proto\022\004lspb\",\n\014CliEnterRoom\022"
      "\016\n\006roomId\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\" \n\014SrvEnte"
      "rRoom\022\020\n\010playerId\030\001 \001(\005\":\n\tBGameInit\022\014\n\004"
      "seed\030\001 \001(\005\022\037\n\005pList\030\002 \003(\0132\020.lspb.PlayerI"
      "nfo\"@\n\nPlayerInfo\022\020\n\010playerId\030\001 \001(\005\022\014\n\004n"
      "ame\030\002 \001(\t\022\022\n\nstartPoint\030\003 \001(\005\"\r\n\013CliInit"
      "Over\"\r\n\013SrvInitOver\"\014\n\nBGameStart\"=\n\nBGa"
      "meFrame\022\013\n\003fId\030\001 \001(\005\022\"\n\010operList\030\002 \003(\0132\020"
      ".lspb.CliOperate\"A\n\nCliOperate\022\021\n\tdirect"
      "ion\030\001 \001(\002\022\016\n\006isFire\030\002 \001(\010\022\020\n\010playerId\030\003 "
      "\001(\005B\022\n\020org.bro.lssrv.pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameProto.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gameProto_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CliEnterRoom::kRoomIdFieldNumber;
const int CliEnterRoom::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CliEnterRoom::CliEnterRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.CliEnterRoom)
}
CliEnterRoom::CliEnterRoom(const CliEnterRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:lspb.CliEnterRoom)
}

void CliEnterRoom::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = 0;
  _cached_size_ = 0;
}

CliEnterRoom::~CliEnterRoom() {
  // @@protoc_insertion_point(destructor:lspb.CliEnterRoom)
  SharedDtor();
}

void CliEnterRoom::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CliEnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CliEnterRoom::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CliEnterRoom& CliEnterRoom::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CliEnterRoom* CliEnterRoom::New(::google::protobuf::Arena* arena) const {
  CliEnterRoom* n = new CliEnterRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CliEnterRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.CliEnterRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = 0;
  _internal_metadata_.Clear();
}

bool CliEnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.CliEnterRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lspb.CliEnterRoom.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.CliEnterRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.CliEnterRoom)
  return false;
#undef DO_
}

void CliEnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.CliEnterRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lspb.CliEnterRoom.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.CliEnterRoom)
}

::google::protobuf::uint8* CliEnterRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.CliEnterRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lspb.CliEnterRoom.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.CliEnterRoom)
  return target;
}

size_t CliEnterRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.CliEnterRoom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 roomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CliEnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.CliEnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CliEnterRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CliEnterRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.CliEnterRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.CliEnterRoom)
    MergeFrom(*source);
  }
}

void CliEnterRoom::MergeFrom(const CliEnterRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.CliEnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void CliEnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.CliEnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CliEnterRoom::CopyFrom(const CliEnterRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.CliEnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CliEnterRoom::IsInitialized() const {
  return true;
}

void CliEnterRoom::Swap(CliEnterRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CliEnterRoom::InternalSwap(CliEnterRoom* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CliEnterRoom::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CliEnterRoom

// int32 roomId = 1;
void CliEnterRoom::clear_roomid() {
  roomid_ = 0;
}
::google::protobuf::int32 CliEnterRoom::roomid() const {
  // @@protoc_insertion_point(field_get:lspb.CliEnterRoom.roomId)
  return roomid_;
}
void CliEnterRoom::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliEnterRoom.roomId)
}

// string name = 2;
void CliEnterRoom::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CliEnterRoom::name() const {
  // @@protoc_insertion_point(field_get:lspb.CliEnterRoom.name)
  return name_.GetNoArena();
}
void CliEnterRoom::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lspb.CliEnterRoom.name)
}
#if LANG_CXX11
void CliEnterRoom::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lspb.CliEnterRoom.name)
}
#endif
void CliEnterRoom::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lspb.CliEnterRoom.name)
}
void CliEnterRoom::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lspb.CliEnterRoom.name)
}
::std::string* CliEnterRoom::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lspb.CliEnterRoom.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CliEnterRoom::release_name() {
  // @@protoc_insertion_point(field_release:lspb.CliEnterRoom.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CliEnterRoom::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lspb.CliEnterRoom.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrvEnterRoom::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrvEnterRoom::SrvEnterRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.SrvEnterRoom)
}
SrvEnterRoom::SrvEnterRoom(const SrvEnterRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:lspb.SrvEnterRoom)
}

void SrvEnterRoom::SharedCtor() {
  playerid_ = 0;
  _cached_size_ = 0;
}

SrvEnterRoom::~SrvEnterRoom() {
  // @@protoc_insertion_point(destructor:lspb.SrvEnterRoom)
  SharedDtor();
}

void SrvEnterRoom::SharedDtor() {
}

void SrvEnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrvEnterRoom::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SrvEnterRoom& SrvEnterRoom::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

SrvEnterRoom* SrvEnterRoom::New(::google::protobuf::Arena* arena) const {
  SrvEnterRoom* n = new SrvEnterRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrvEnterRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.SrvEnterRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0;
  _internal_metadata_.Clear();
}

bool SrvEnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.SrvEnterRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.SrvEnterRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.SrvEnterRoom)
  return false;
#undef DO_
}

void SrvEnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.SrvEnterRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.SrvEnterRoom)
}

::google::protobuf::uint8* SrvEnterRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.SrvEnterRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.SrvEnterRoom)
  return target;
}

size_t SrvEnterRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.SrvEnterRoom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrvEnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.SrvEnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const SrvEnterRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SrvEnterRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.SrvEnterRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.SrvEnterRoom)
    MergeFrom(*source);
  }
}

void SrvEnterRoom::MergeFrom(const SrvEnterRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.SrvEnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void SrvEnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.SrvEnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrvEnterRoom::CopyFrom(const SrvEnterRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.SrvEnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrvEnterRoom::IsInitialized() const {
  return true;
}

void SrvEnterRoom::Swap(SrvEnterRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrvEnterRoom::InternalSwap(SrvEnterRoom* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SrvEnterRoom::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrvEnterRoom

// int32 playerId = 1;
void SrvEnterRoom::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 SrvEnterRoom::playerid() const {
  // @@protoc_insertion_point(field_get:lspb.SrvEnterRoom.playerId)
  return playerid_;
}
void SrvEnterRoom::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:lspb.SrvEnterRoom.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BGameInit::kSeedFieldNumber;
const int BGameInit::kPListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BGameInit::BGameInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.BGameInit)
}
BGameInit::BGameInit(const BGameInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      plist_(from.plist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seed_ = from.seed_;
  // @@protoc_insertion_point(copy_constructor:lspb.BGameInit)
}

void BGameInit::SharedCtor() {
  seed_ = 0;
  _cached_size_ = 0;
}

BGameInit::~BGameInit() {
  // @@protoc_insertion_point(destructor:lspb.BGameInit)
  SharedDtor();
}

void BGameInit::SharedDtor() {
}

void BGameInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BGameInit::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BGameInit& BGameInit::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

BGameInit* BGameInit::New(::google::protobuf::Arena* arena) const {
  BGameInit* n = new BGameInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BGameInit::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.BGameInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plist_.Clear();
  seed_ = 0;
  _internal_metadata_.Clear();
}

bool BGameInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.BGameInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 seed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lspb.PlayerInfo pList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.BGameInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.BGameInit)
  return false;
#undef DO_
}

void BGameInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.BGameInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seed = 1;
  if (this->seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seed(), output);
  }

  // repeated .lspb.PlayerInfo pList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plist(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.BGameInit)
}

::google::protobuf::uint8* BGameInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.BGameInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seed = 1;
  if (this->seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seed(), target);
  }

  // repeated .lspb.PlayerInfo pList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->plist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.BGameInit)
  return target;
}

size_t BGameInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.BGameInit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .lspb.PlayerInfo pList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->plist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plist(static_cast<int>(i)));
    }
  }

  // int32 seed = 1;
  if (this->seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BGameInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.BGameInit)
  GOOGLE_DCHECK_NE(&from, this);
  const BGameInit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BGameInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.BGameInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.BGameInit)
    MergeFrom(*source);
  }
}

void BGameInit::MergeFrom(const BGameInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.BGameInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plist_.MergeFrom(from.plist_);
  if (from.seed() != 0) {
    set_seed(from.seed());
  }
}

void BGameInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.BGameInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BGameInit::CopyFrom(const BGameInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.BGameInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGameInit::IsInitialized() const {
  return true;
}

void BGameInit::Swap(BGameInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BGameInit::InternalSwap(BGameInit* other) {
  using std::swap;
  plist_.InternalSwap(&other->plist_);
  swap(seed_, other->seed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BGameInit::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BGameInit

// int32 seed = 1;
void BGameInit::clear_seed() {
  seed_ = 0;
}
::google::protobuf::int32 BGameInit::seed() const {
  // @@protoc_insertion_point(field_get:lspb.BGameInit.seed)
  return seed_;
}
void BGameInit::set_seed(::google::protobuf::int32 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:lspb.BGameInit.seed)
}

// repeated .lspb.PlayerInfo pList = 2;
int BGameInit::plist_size() const {
  return plist_.size();
}
void BGameInit::clear_plist() {
  plist_.Clear();
}
const ::lspb::PlayerInfo& BGameInit::plist(int index) const {
  // @@protoc_insertion_point(field_get:lspb.BGameInit.pList)
  return plist_.Get(index);
}
::lspb::PlayerInfo* BGameInit::mutable_plist(int index) {
  // @@protoc_insertion_point(field_mutable:lspb.BGameInit.pList)
  return plist_.Mutable(index);
}
::lspb::PlayerInfo* BGameInit::add_plist() {
  // @@protoc_insertion_point(field_add:lspb.BGameInit.pList)
  return plist_.Add();
}
::google::protobuf::RepeatedPtrField< ::lspb::PlayerInfo >*
BGameInit::mutable_plist() {
  // @@protoc_insertion_point(field_mutable_list:lspb.BGameInit.pList)
  return &plist_;
}
const ::google::protobuf::RepeatedPtrField< ::lspb::PlayerInfo >&
BGameInit::plist() const {
  // @@protoc_insertion_point(field_list:lspb.BGameInit.pList)
  return plist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kPlayerIdFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kStartPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&startpoint_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(startpoint_));
  // @@protoc_insertion_point(copy_constructor:lspb.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startpoint_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(startpoint_));
  _cached_size_ = 0;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:lspb.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInfo& PlayerInfo::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startpoint_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(startpoint_));
  _internal_metadata_.Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lspb.PlayerInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 startPoint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lspb.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 startPoint = 3;
  if (this->startpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startpoint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lspb.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 startPoint = 3;
  if (this->startpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startpoint(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.PlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  // int32 startPoint = 3;
  if (this->startpoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpoint());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.startpoint() != 0) {
    set_startpoint(from.startpoint());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(playerid_, other->playerid_);
  swap(startpoint_, other->startpoint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// int32 playerId = 1;
void PlayerInfo::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 PlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:lspb.PlayerInfo.playerId)
  return playerid_;
}
void PlayerInfo::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:lspb.PlayerInfo.playerId)
}

// string name = 2;
void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:lspb.PlayerInfo.name)
  return name_.GetNoArena();
}
void PlayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lspb.PlayerInfo.name)
}
#if LANG_CXX11
void PlayerInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lspb.PlayerInfo.name)
}
#endif
void PlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lspb.PlayerInfo.name)
}
void PlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lspb.PlayerInfo.name)
}
::std::string* PlayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lspb.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:lspb.PlayerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lspb.PlayerInfo.name)
}

// int32 startPoint = 3;
void PlayerInfo::clear_startpoint() {
  startpoint_ = 0;
}
::google::protobuf::int32 PlayerInfo::startpoint() const {
  // @@protoc_insertion_point(field_get:lspb.PlayerInfo.startPoint)
  return startpoint_;
}
void PlayerInfo::set_startpoint(::google::protobuf::int32 value) {
  
  startpoint_ = value;
  // @@protoc_insertion_point(field_set:lspb.PlayerInfo.startPoint)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CliInitOver::CliInitOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.CliInitOver)
}
CliInitOver::CliInitOver(const CliInitOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lspb.CliInitOver)
}

void CliInitOver::SharedCtor() {
  _cached_size_ = 0;
}

CliInitOver::~CliInitOver() {
  // @@protoc_insertion_point(destructor:lspb.CliInitOver)
  SharedDtor();
}

void CliInitOver::SharedDtor() {
}

void CliInitOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CliInitOver::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CliInitOver& CliInitOver::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CliInitOver* CliInitOver::New(::google::protobuf::Arena* arena) const {
  CliInitOver* n = new CliInitOver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CliInitOver::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.CliInitOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CliInitOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.CliInitOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.CliInitOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.CliInitOver)
  return false;
#undef DO_
}

void CliInitOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.CliInitOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.CliInitOver)
}

::google::protobuf::uint8* CliInitOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.CliInitOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.CliInitOver)
  return target;
}

size_t CliInitOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.CliInitOver)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CliInitOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.CliInitOver)
  GOOGLE_DCHECK_NE(&from, this);
  const CliInitOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CliInitOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.CliInitOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.CliInitOver)
    MergeFrom(*source);
  }
}

void CliInitOver::MergeFrom(const CliInitOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.CliInitOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CliInitOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.CliInitOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CliInitOver::CopyFrom(const CliInitOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.CliInitOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CliInitOver::IsInitialized() const {
  return true;
}

void CliInitOver::Swap(CliInitOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CliInitOver::InternalSwap(CliInitOver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CliInitOver::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CliInitOver

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrvInitOver::SrvInitOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.SrvInitOver)
}
SrvInitOver::SrvInitOver(const SrvInitOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lspb.SrvInitOver)
}

void SrvInitOver::SharedCtor() {
  _cached_size_ = 0;
}

SrvInitOver::~SrvInitOver() {
  // @@protoc_insertion_point(destructor:lspb.SrvInitOver)
  SharedDtor();
}

void SrvInitOver::SharedDtor() {
}

void SrvInitOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrvInitOver::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SrvInitOver& SrvInitOver::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

SrvInitOver* SrvInitOver::New(::google::protobuf::Arena* arena) const {
  SrvInitOver* n = new SrvInitOver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrvInitOver::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.SrvInitOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SrvInitOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.SrvInitOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.SrvInitOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.SrvInitOver)
  return false;
#undef DO_
}

void SrvInitOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.SrvInitOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.SrvInitOver)
}

::google::protobuf::uint8* SrvInitOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.SrvInitOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.SrvInitOver)
  return target;
}

size_t SrvInitOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.SrvInitOver)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrvInitOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.SrvInitOver)
  GOOGLE_DCHECK_NE(&from, this);
  const SrvInitOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SrvInitOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.SrvInitOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.SrvInitOver)
    MergeFrom(*source);
  }
}

void SrvInitOver::MergeFrom(const SrvInitOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.SrvInitOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SrvInitOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.SrvInitOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrvInitOver::CopyFrom(const SrvInitOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.SrvInitOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrvInitOver::IsInitialized() const {
  return true;
}

void SrvInitOver::Swap(SrvInitOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrvInitOver::InternalSwap(SrvInitOver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SrvInitOver::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrvInitOver

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BGameStart::BGameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.BGameStart)
}
BGameStart::BGameStart(const BGameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lspb.BGameStart)
}

void BGameStart::SharedCtor() {
  _cached_size_ = 0;
}

BGameStart::~BGameStart() {
  // @@protoc_insertion_point(destructor:lspb.BGameStart)
  SharedDtor();
}

void BGameStart::SharedDtor() {
}

void BGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BGameStart::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BGameStart& BGameStart::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

BGameStart* BGameStart::New(::google::protobuf::Arena* arena) const {
  BGameStart* n = new BGameStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BGameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.BGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool BGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.BGameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.BGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.BGameStart)
  return false;
#undef DO_
}

void BGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.BGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.BGameStart)
}

::google::protobuf::uint8* BGameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.BGameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.BGameStart)
  return target;
}

size_t BGameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.BGameStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BGameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.BGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const BGameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BGameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.BGameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.BGameStart)
    MergeFrom(*source);
  }
}

void BGameStart::MergeFrom(const BGameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.BGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BGameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.BGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BGameStart::CopyFrom(const BGameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.BGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGameStart::IsInitialized() const {
  return true;
}

void BGameStart::Swap(BGameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BGameStart::InternalSwap(BGameStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BGameStart::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BGameStart

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BGameFrame::kFIdFieldNumber;
const int BGameFrame::kOperListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BGameFrame::BGameFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.BGameFrame)
}
BGameFrame::BGameFrame(const BGameFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      operlist_(from.operlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fid_ = from.fid_;
  // @@protoc_insertion_point(copy_constructor:lspb.BGameFrame)
}

void BGameFrame::SharedCtor() {
  fid_ = 0;
  _cached_size_ = 0;
}

BGameFrame::~BGameFrame() {
  // @@protoc_insertion_point(destructor:lspb.BGameFrame)
  SharedDtor();
}

void BGameFrame::SharedDtor() {
}

void BGameFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BGameFrame::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BGameFrame& BGameFrame::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

BGameFrame* BGameFrame::New(::google::protobuf::Arena* arena) const {
  BGameFrame* n = new BGameFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BGameFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.BGameFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operlist_.Clear();
  fid_ = 0;
  _internal_metadata_.Clear();
}

bool BGameFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.BGameFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lspb.CliOperate operList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.BGameFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.BGameFrame)
  return false;
#undef DO_
}

void BGameFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.BGameFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fId = 1;
  if (this->fid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fid(), output);
  }

  // repeated .lspb.CliOperate operList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operlist(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.BGameFrame)
}

::google::protobuf::uint8* BGameFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.BGameFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fId = 1;
  if (this->fid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fid(), target);
  }

  // repeated .lspb.CliOperate operList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->operlist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.BGameFrame)
  return target;
}

size_t BGameFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.BGameFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .lspb.CliOperate operList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->operlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operlist(static_cast<int>(i)));
    }
  }

  // int32 fId = 1;
  if (this->fid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BGameFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.BGameFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const BGameFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BGameFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.BGameFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.BGameFrame)
    MergeFrom(*source);
  }
}

void BGameFrame::MergeFrom(const BGameFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.BGameFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operlist_.MergeFrom(from.operlist_);
  if (from.fid() != 0) {
    set_fid(from.fid());
  }
}

void BGameFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.BGameFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BGameFrame::CopyFrom(const BGameFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.BGameFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGameFrame::IsInitialized() const {
  return true;
}

void BGameFrame::Swap(BGameFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BGameFrame::InternalSwap(BGameFrame* other) {
  using std::swap;
  operlist_.InternalSwap(&other->operlist_);
  swap(fid_, other->fid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BGameFrame::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BGameFrame

// int32 fId = 1;
void BGameFrame::clear_fid() {
  fid_ = 0;
}
::google::protobuf::int32 BGameFrame::fid() const {
  // @@protoc_insertion_point(field_get:lspb.BGameFrame.fId)
  return fid_;
}
void BGameFrame::set_fid(::google::protobuf::int32 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:lspb.BGameFrame.fId)
}

// repeated .lspb.CliOperate operList = 2;
int BGameFrame::operlist_size() const {
  return operlist_.size();
}
void BGameFrame::clear_operlist() {
  operlist_.Clear();
}
const ::lspb::CliOperate& BGameFrame::operlist(int index) const {
  // @@protoc_insertion_point(field_get:lspb.BGameFrame.operList)
  return operlist_.Get(index);
}
::lspb::CliOperate* BGameFrame::mutable_operlist(int index) {
  // @@protoc_insertion_point(field_mutable:lspb.BGameFrame.operList)
  return operlist_.Mutable(index);
}
::lspb::CliOperate* BGameFrame::add_operlist() {
  // @@protoc_insertion_point(field_add:lspb.BGameFrame.operList)
  return operlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::lspb::CliOperate >*
BGameFrame::mutable_operlist() {
  // @@protoc_insertion_point(field_mutable_list:lspb.BGameFrame.operList)
  return &operlist_;
}
const ::google::protobuf::RepeatedPtrField< ::lspb::CliOperate >&
BGameFrame::operlist() const {
  // @@protoc_insertion_point(field_list:lspb.BGameFrame.operList)
  return operlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CliOperate::kDirectionFieldNumber;
const int CliOperate::kIsFireFieldNumber;
const int CliOperate::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CliOperate::CliOperate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lspb.CliOperate)
}
CliOperate::CliOperate(const CliOperate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:lspb.CliOperate)
}

void CliOperate::SharedCtor() {
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(playerid_));
  _cached_size_ = 0;
}

CliOperate::~CliOperate() {
  // @@protoc_insertion_point(destructor:lspb.CliOperate)
  SharedDtor();
}

void CliOperate::SharedDtor() {
}

void CliOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CliOperate::descriptor() {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CliOperate& CliOperate::default_instance() {
  protobuf_gameProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CliOperate* CliOperate::New(::google::protobuf::Arena* arena) const {
  CliOperate* n = new CliOperate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CliOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.CliOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(playerid_));
  _internal_metadata_.Clear();
}

bool CliOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lspb.CliOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float direction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFire = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lspb.CliOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lspb.CliOperate)
  return false;
#undef DO_
}

void CliOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lspb.CliOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float direction = 1;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->direction(), output);
  }

  // bool isFire = 2;
  if (this->isfire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfire(), output);
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lspb.CliOperate)
}

::google::protobuf::uint8* CliOperate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lspb.CliOperate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float direction = 1;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->direction(), target);
  }

  // bool isFire = 2;
  if (this->isfire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfire(), target);
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.CliOperate)
  return target;
}

size_t CliOperate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.CliOperate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float direction = 1;
  if (this->direction() != 0) {
    total_size += 1 + 4;
  }

  // bool isFire = 2;
  if (this->isfire() != 0) {
    total_size += 1 + 1;
  }

  // int32 playerId = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CliOperate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.CliOperate)
  GOOGLE_DCHECK_NE(&from, this);
  const CliOperate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CliOperate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.CliOperate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.CliOperate)
    MergeFrom(*source);
  }
}

void CliOperate::MergeFrom(const CliOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.CliOperate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.isfire() != 0) {
    set_isfire(from.isfire());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void CliOperate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.CliOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CliOperate::CopyFrom(const CliOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.CliOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CliOperate::IsInitialized() const {
  return true;
}

void CliOperate::Swap(CliOperate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CliOperate::InternalSwap(CliOperate* other) {
  using std::swap;
  swap(direction_, other->direction_);
  swap(isfire_, other->isfire_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CliOperate::GetMetadata() const {
  protobuf_gameProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameProto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CliOperate

// float direction = 1;
void CliOperate::clear_direction() {
  direction_ = 0;
}
float CliOperate::direction() const {
  // @@protoc_insertion_point(field_get:lspb.CliOperate.direction)
  return direction_;
}
void CliOperate::set_direction(float value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliOperate.direction)
}

// bool isFire = 2;
void CliOperate::clear_isfire() {
  isfire_ = false;
}
bool CliOperate::isfire() const {
  // @@protoc_insertion_point(field_get:lspb.CliOperate.isFire)
  return isfire_;
}
void CliOperate::set_isfire(bool value) {
  
  isfire_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliOperate.isFire)
}

// int32 playerId = 3;
void CliOperate::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 CliOperate::playerid() const {
  // @@protoc_insertion_point(field_get:lspb.CliOperate.playerId)
  return playerid_;
}
void CliOperate::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:lspb.CliOperate.playerId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lspb

// @@protoc_insertion_point(global_scope)
