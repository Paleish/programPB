// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvRes.proto

#ifndef PROTOBUF_srvRes_2eproto__INCLUDED
#define PROTOBUF_srvRes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "lsEnum.pb.h"
#include "gameProto.pb.h"
// @@protoc_insertion_point(includes)
namespace lspb {
class SrvRes;
class SrvResDefaultTypeInternal;
extern SrvResDefaultTypeInternal _SrvRes_default_instance_;
}  // namespace lspb

namespace lspb {

namespace protobuf_srvRes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_srvRes_2eproto

enum SrvMsgType {
  errorClientType = 0,
  srvEnterRoom = 101,
  srvInitOver = 102,
  bGameInit = 1001,
  bGameStart = 1002,
  bGameFrame = 1003,
  SrvMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SrvMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SrvMsgType_IsValid(int value);
const SrvMsgType SrvMsgType_MIN = errorClientType;
const SrvMsgType SrvMsgType_MAX = bGameFrame;
const int SrvMsgType_ARRAYSIZE = SrvMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SrvMsgType_descriptor();
inline const ::std::string& SrvMsgType_Name(SrvMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SrvMsgType_descriptor(), value);
}
inline bool SrvMsgType_Parse(
    const ::std::string& name, SrvMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SrvMsgType>(
    SrvMsgType_descriptor(), name, value);
}
// ===================================================================

class SrvRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lspb.SrvRes) */ {
 public:
  SrvRes();
  virtual ~SrvRes();

  SrvRes(const SrvRes& from);

  inline SrvRes& operator=(const SrvRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrvRes(SrvRes&& from) noexcept
    : SrvRes() {
    *this = ::std::move(from);
  }

  inline SrvRes& operator=(SrvRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SrvRes& default_instance();

  static inline const SrvRes* internal_default_instance() {
    return reinterpret_cast<const SrvRes*>(
               &_SrvRes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SrvRes* other);
  friend void swap(SrvRes& a, SrvRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrvRes* New() const PROTOBUF_FINAL { return New(NULL); }

  SrvRes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SrvRes& from);
  void MergeFrom(const SrvRes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SrvRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errStr = 3;
  void clear_errstr();
  static const int kErrStrFieldNumber = 3;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // .lspb.SrvEnterRoom srvEnterRoom = 101;
  bool has_srventerroom() const;
  void clear_srventerroom();
  static const int kSrvEnterRoomFieldNumber = 101;
  const ::lspb::SrvEnterRoom& srventerroom() const;
  ::lspb::SrvEnterRoom* mutable_srventerroom();
  ::lspb::SrvEnterRoom* release_srventerroom();
  void set_allocated_srventerroom(::lspb::SrvEnterRoom* srventerroom);

  // .lspb.SrvInitOver srvInitOver = 102;
  bool has_srvinitover() const;
  void clear_srvinitover();
  static const int kSrvInitOverFieldNumber = 102;
  const ::lspb::SrvInitOver& srvinitover() const;
  ::lspb::SrvInitOver* mutable_srvinitover();
  ::lspb::SrvInitOver* release_srvinitover();
  void set_allocated_srvinitover(::lspb::SrvInitOver* srvinitover);

  // .lspb.BGameInit bGameInit = 1001;
  bool has_bgameinit() const;
  void clear_bgameinit();
  static const int kBGameInitFieldNumber = 1001;
  const ::lspb::BGameInit& bgameinit() const;
  ::lspb::BGameInit* mutable_bgameinit();
  ::lspb::BGameInit* release_bgameinit();
  void set_allocated_bgameinit(::lspb::BGameInit* bgameinit);

  // .lspb.BGameStart bGameStart = 1002;
  bool has_bgamestart() const;
  void clear_bgamestart();
  static const int kBGameStartFieldNumber = 1002;
  const ::lspb::BGameStart& bgamestart() const;
  ::lspb::BGameStart* mutable_bgamestart();
  ::lspb::BGameStart* release_bgamestart();
  void set_allocated_bgamestart(::lspb::BGameStart* bgamestart);

  // .lspb.BGameFrame bGameFrame = 1003;
  bool has_bgameframe() const;
  void clear_bgameframe();
  static const int kBGameFrameFieldNumber = 1003;
  const ::lspb::BGameFrame& bgameframe() const;
  ::lspb::BGameFrame* mutable_bgameframe();
  ::lspb::BGameFrame* release_bgameframe();
  void set_allocated_bgameframe(::lspb::BGameFrame* bgameframe);

  // .lspb.SrvMsgType methodId = 1;
  void clear_methodid();
  static const int kMethodIdFieldNumber = 1;
  ::lspb::SrvMsgType methodid() const;
  void set_methodid(::lspb::SrvMsgType value);

  // .lspb.Result result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::lspb::Result result() const;
  void set_result(::lspb::Result value);

  // @@protoc_insertion_point(class_scope:lspb.SrvRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  ::lspb::SrvEnterRoom* srventerroom_;
  ::lspb::SrvInitOver* srvinitover_;
  ::lspb::BGameInit* bgameinit_;
  ::lspb::BGameStart* bgamestart_;
  ::lspb::BGameFrame* bgameframe_;
  int methodid_;
  int result_;
  mutable int _cached_size_;
  friend struct protobuf_srvRes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SrvRes

// .lspb.SrvMsgType methodId = 1;
inline void SrvRes::clear_methodid() {
  methodid_ = 0;
}
inline ::lspb::SrvMsgType SrvRes::methodid() const {
  // @@protoc_insertion_point(field_get:lspb.SrvRes.methodId)
  return static_cast< ::lspb::SrvMsgType >(methodid_);
}
inline void SrvRes::set_methodid(::lspb::SrvMsgType value) {
  
  methodid_ = value;
  // @@protoc_insertion_point(field_set:lspb.SrvRes.methodId)
}

// .lspb.Result result = 2;
inline void SrvRes::clear_result() {
  result_ = 0;
}
inline ::lspb::Result SrvRes::result() const {
  // @@protoc_insertion_point(field_get:lspb.SrvRes.result)
  return static_cast< ::lspb::Result >(result_);
}
inline void SrvRes::set_result(::lspb::Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:lspb.SrvRes.result)
}

// string errStr = 3;
inline void SrvRes::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrvRes::errstr() const {
  // @@protoc_insertion_point(field_get:lspb.SrvRes.errStr)
  return errstr_.GetNoArena();
}
inline void SrvRes::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lspb.SrvRes.errStr)
}
#if LANG_CXX11
inline void SrvRes::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lspb.SrvRes.errStr)
}
#endif
inline void SrvRes::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lspb.SrvRes.errStr)
}
inline void SrvRes::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lspb.SrvRes.errStr)
}
inline ::std::string* SrvRes::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:lspb.SrvRes.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrvRes::release_errstr() {
  // @@protoc_insertion_point(field_release:lspb.SrvRes.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrvRes::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:lspb.SrvRes.errStr)
}

// .lspb.SrvEnterRoom srvEnterRoom = 101;
inline bool SrvRes::has_srventerroom() const {
  return this != internal_default_instance() && srventerroom_ != NULL;
}
inline void SrvRes::clear_srventerroom() {
  if (GetArenaNoVirtual() == NULL && srventerroom_ != NULL) delete srventerroom_;
  srventerroom_ = NULL;
}
inline const ::lspb::SrvEnterRoom& SrvRes::srventerroom() const {
  const ::lspb::SrvEnterRoom* p = srventerroom_;
  // @@protoc_insertion_point(field_get:lspb.SrvRes.srvEnterRoom)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::SrvEnterRoom*>(
      &::lspb::_SrvEnterRoom_default_instance_);
}
inline ::lspb::SrvEnterRoom* SrvRes::mutable_srventerroom() {
  
  if (srventerroom_ == NULL) {
    srventerroom_ = new ::lspb::SrvEnterRoom;
  }
  // @@protoc_insertion_point(field_mutable:lspb.SrvRes.srvEnterRoom)
  return srventerroom_;
}
inline ::lspb::SrvEnterRoom* SrvRes::release_srventerroom() {
  // @@protoc_insertion_point(field_release:lspb.SrvRes.srvEnterRoom)
  
  ::lspb::SrvEnterRoom* temp = srventerroom_;
  srventerroom_ = NULL;
  return temp;
}
inline void SrvRes::set_allocated_srventerroom(::lspb::SrvEnterRoom* srventerroom) {
  delete srventerroom_;
  srventerroom_ = srventerroom;
  if (srventerroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.SrvRes.srvEnterRoom)
}

// .lspb.SrvInitOver srvInitOver = 102;
inline bool SrvRes::has_srvinitover() const {
  return this != internal_default_instance() && srvinitover_ != NULL;
}
inline void SrvRes::clear_srvinitover() {
  if (GetArenaNoVirtual() == NULL && srvinitover_ != NULL) delete srvinitover_;
  srvinitover_ = NULL;
}
inline const ::lspb::SrvInitOver& SrvRes::srvinitover() const {
  const ::lspb::SrvInitOver* p = srvinitover_;
  // @@protoc_insertion_point(field_get:lspb.SrvRes.srvInitOver)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::SrvInitOver*>(
      &::lspb::_SrvInitOver_default_instance_);
}
inline ::lspb::SrvInitOver* SrvRes::mutable_srvinitover() {
  
  if (srvinitover_ == NULL) {
    srvinitover_ = new ::lspb::SrvInitOver;
  }
  // @@protoc_insertion_point(field_mutable:lspb.SrvRes.srvInitOver)
  return srvinitover_;
}
inline ::lspb::SrvInitOver* SrvRes::release_srvinitover() {
  // @@protoc_insertion_point(field_release:lspb.SrvRes.srvInitOver)
  
  ::lspb::SrvInitOver* temp = srvinitover_;
  srvinitover_ = NULL;
  return temp;
}
inline void SrvRes::set_allocated_srvinitover(::lspb::SrvInitOver* srvinitover) {
  delete srvinitover_;
  srvinitover_ = srvinitover;
  if (srvinitover) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.SrvRes.srvInitOver)
}

// .lspb.BGameInit bGameInit = 1001;
inline bool SrvRes::has_bgameinit() const {
  return this != internal_default_instance() && bgameinit_ != NULL;
}
inline void SrvRes::clear_bgameinit() {
  if (GetArenaNoVirtual() == NULL && bgameinit_ != NULL) delete bgameinit_;
  bgameinit_ = NULL;
}
inline const ::lspb::BGameInit& SrvRes::bgameinit() const {
  const ::lspb::BGameInit* p = bgameinit_;
  // @@protoc_insertion_point(field_get:lspb.SrvRes.bGameInit)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::BGameInit*>(
      &::lspb::_BGameInit_default_instance_);
}
inline ::lspb::BGameInit* SrvRes::mutable_bgameinit() {
  
  if (bgameinit_ == NULL) {
    bgameinit_ = new ::lspb::BGameInit;
  }
  // @@protoc_insertion_point(field_mutable:lspb.SrvRes.bGameInit)
  return bgameinit_;
}
inline ::lspb::BGameInit* SrvRes::release_bgameinit() {
  // @@protoc_insertion_point(field_release:lspb.SrvRes.bGameInit)
  
  ::lspb::BGameInit* temp = bgameinit_;
  bgameinit_ = NULL;
  return temp;
}
inline void SrvRes::set_allocated_bgameinit(::lspb::BGameInit* bgameinit) {
  delete bgameinit_;
  bgameinit_ = bgameinit;
  if (bgameinit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.SrvRes.bGameInit)
}

// .lspb.BGameStart bGameStart = 1002;
inline bool SrvRes::has_bgamestart() const {
  return this != internal_default_instance() && bgamestart_ != NULL;
}
inline void SrvRes::clear_bgamestart() {
  if (GetArenaNoVirtual() == NULL && bgamestart_ != NULL) delete bgamestart_;
  bgamestart_ = NULL;
}
inline const ::lspb::BGameStart& SrvRes::bgamestart() const {
  const ::lspb::BGameStart* p = bgamestart_;
  // @@protoc_insertion_point(field_get:lspb.SrvRes.bGameStart)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::BGameStart*>(
      &::lspb::_BGameStart_default_instance_);
}
inline ::lspb::BGameStart* SrvRes::mutable_bgamestart() {
  
  if (bgamestart_ == NULL) {
    bgamestart_ = new ::lspb::BGameStart;
  }
  // @@protoc_insertion_point(field_mutable:lspb.SrvRes.bGameStart)
  return bgamestart_;
}
inline ::lspb::BGameStart* SrvRes::release_bgamestart() {
  // @@protoc_insertion_point(field_release:lspb.SrvRes.bGameStart)
  
  ::lspb::BGameStart* temp = bgamestart_;
  bgamestart_ = NULL;
  return temp;
}
inline void SrvRes::set_allocated_bgamestart(::lspb::BGameStart* bgamestart) {
  delete bgamestart_;
  bgamestart_ = bgamestart;
  if (bgamestart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.SrvRes.bGameStart)
}

// .lspb.BGameFrame bGameFrame = 1003;
inline bool SrvRes::has_bgameframe() const {
  return this != internal_default_instance() && bgameframe_ != NULL;
}
inline void SrvRes::clear_bgameframe() {
  if (GetArenaNoVirtual() == NULL && bgameframe_ != NULL) delete bgameframe_;
  bgameframe_ = NULL;
}
inline const ::lspb::BGameFrame& SrvRes::bgameframe() const {
  const ::lspb::BGameFrame* p = bgameframe_;
  // @@protoc_insertion_point(field_get:lspb.SrvRes.bGameFrame)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::BGameFrame*>(
      &::lspb::_BGameFrame_default_instance_);
}
inline ::lspb::BGameFrame* SrvRes::mutable_bgameframe() {
  
  if (bgameframe_ == NULL) {
    bgameframe_ = new ::lspb::BGameFrame;
  }
  // @@protoc_insertion_point(field_mutable:lspb.SrvRes.bGameFrame)
  return bgameframe_;
}
inline ::lspb::BGameFrame* SrvRes::release_bgameframe() {
  // @@protoc_insertion_point(field_release:lspb.SrvRes.bGameFrame)
  
  ::lspb::BGameFrame* temp = bgameframe_;
  bgameframe_ = NULL;
  return temp;
}
inline void SrvRes::set_allocated_bgameframe(::lspb::BGameFrame* bgameframe) {
  delete bgameframe_;
  bgameframe_ = bgameframe;
  if (bgameframe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.SrvRes.bGameFrame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace lspb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lspb::SrvMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lspb::SrvMsgType>() {
  return ::lspb::SrvMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_srvRes_2eproto__INCLUDED
