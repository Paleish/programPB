// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvRes.proto

#ifndef PROTOBUF_srvRes_2eproto__INCLUDED
#define PROTOBUF_srvRes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "lsEnum.pb.h"
#include "gameProto.pb.h"
// @@protoc_insertion_point(includes)
namespace lspb {
class SrvRes;
class SrvResDefaultTypeInternal;
extern SrvResDefaultTypeInternal _SrvRes_default_instance_;
}  // namespace lspb

namespace lspb {

namespace protobuf_srvRes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_srvRes_2eproto

enum SrvMsgType {
  errorClientType = 0,
  serverEnterGame = 101,
  SrvMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SrvMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SrvMsgType_IsValid(int value);
const SrvMsgType SrvMsgType_MIN = errorClientType;
const SrvMsgType SrvMsgType_MAX = serverEnterGame;
const int SrvMsgType_ARRAYSIZE = SrvMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SrvMsgType_descriptor();
inline const ::std::string& SrvMsgType_Name(SrvMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SrvMsgType_descriptor(), value);
}
inline bool SrvMsgType_Parse(
    const ::std::string& name, SrvMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SrvMsgType>(
    SrvMsgType_descriptor(), name, value);
}
// ===================================================================

class SrvRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lspb.SrvRes) */ {
 public:
  SrvRes();
  virtual ~SrvRes();

  SrvRes(const SrvRes& from);

  inline SrvRes& operator=(const SrvRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrvRes(SrvRes&& from) noexcept
    : SrvRes() {
    *this = ::std::move(from);
  }

  inline SrvRes& operator=(SrvRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SrvRes& default_instance();

  static inline const SrvRes* internal_default_instance() {
    return reinterpret_cast<const SrvRes*>(
               &_SrvRes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SrvRes* other);
  friend void swap(SrvRes& a, SrvRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrvRes* New() const PROTOBUF_FINAL { return New(NULL); }

  SrvRes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SrvRes& from);
  void MergeFrom(const SrvRes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SrvRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errStr = 3;
  void clear_errstr();
  static const int kErrStrFieldNumber = 3;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // .lspb.SrvEnterGame srvEnterGame = 4;
  bool has_srventergame() const;
  void clear_srventergame();
  static const int kSrvEnterGameFieldNumber = 4;
  const ::lspb::SrvEnterGame& srventergame() const;
  ::lspb::SrvEnterGame* mutable_srventergame();
  ::lspb::SrvEnterGame* release_srventergame();
  void set_allocated_srventergame(::lspb::SrvEnterGame* srventergame);

  // .lspb.SrvMsgType methodId = 1;
  void clear_methodid();
  static const int kMethodIdFieldNumber = 1;
  ::lspb::SrvMsgType methodid() const;
  void set_methodid(::lspb::SrvMsgType value);

  // .lspb.Result result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::lspb::Result result() const;
  void set_result(::lspb::Result value);

  // @@protoc_insertion_point(class_scope:lspb.SrvRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  ::lspb::SrvEnterGame* srventergame_;
  int methodid_;
  int result_;
  mutable int _cached_size_;
  friend struct protobuf_srvRes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SrvRes

// .lspb.SrvMsgType methodId = 1;
inline void SrvRes::clear_methodid() {
  methodid_ = 0;
}
inline ::lspb::SrvMsgType SrvRes::methodid() const {
  // @@protoc_insertion_point(field_get:lspb.SrvRes.methodId)
  return static_cast< ::lspb::SrvMsgType >(methodid_);
}
inline void SrvRes::set_methodid(::lspb::SrvMsgType value) {
  
  methodid_ = value;
  // @@protoc_insertion_point(field_set:lspb.SrvRes.methodId)
}

// .lspb.Result result = 2;
inline void SrvRes::clear_result() {
  result_ = 0;
}
inline ::lspb::Result SrvRes::result() const {
  // @@protoc_insertion_point(field_get:lspb.SrvRes.result)
  return static_cast< ::lspb::Result >(result_);
}
inline void SrvRes::set_result(::lspb::Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:lspb.SrvRes.result)
}

// string errStr = 3;
inline void SrvRes::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrvRes::errstr() const {
  // @@protoc_insertion_point(field_get:lspb.SrvRes.errStr)
  return errstr_.GetNoArena();
}
inline void SrvRes::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lspb.SrvRes.errStr)
}
#if LANG_CXX11
inline void SrvRes::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lspb.SrvRes.errStr)
}
#endif
inline void SrvRes::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lspb.SrvRes.errStr)
}
inline void SrvRes::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lspb.SrvRes.errStr)
}
inline ::std::string* SrvRes::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:lspb.SrvRes.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrvRes::release_errstr() {
  // @@protoc_insertion_point(field_release:lspb.SrvRes.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrvRes::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:lspb.SrvRes.errStr)
}

// .lspb.SrvEnterGame srvEnterGame = 4;
inline bool SrvRes::has_srventergame() const {
  return this != internal_default_instance() && srventergame_ != NULL;
}
inline void SrvRes::clear_srventergame() {
  if (GetArenaNoVirtual() == NULL && srventergame_ != NULL) delete srventergame_;
  srventergame_ = NULL;
}
inline const ::lspb::SrvEnterGame& SrvRes::srventergame() const {
  const ::lspb::SrvEnterGame* p = srventergame_;
  // @@protoc_insertion_point(field_get:lspb.SrvRes.srvEnterGame)
  return p != NULL ? *p : *reinterpret_cast<const ::lspb::SrvEnterGame*>(
      &::lspb::_SrvEnterGame_default_instance_);
}
inline ::lspb::SrvEnterGame* SrvRes::mutable_srventergame() {
  
  if (srventergame_ == NULL) {
    srventergame_ = new ::lspb::SrvEnterGame;
  }
  // @@protoc_insertion_point(field_mutable:lspb.SrvRes.srvEnterGame)
  return srventergame_;
}
inline ::lspb::SrvEnterGame* SrvRes::release_srventergame() {
  // @@protoc_insertion_point(field_release:lspb.SrvRes.srvEnterGame)
  
  ::lspb::SrvEnterGame* temp = srventergame_;
  srventergame_ = NULL;
  return temp;
}
inline void SrvRes::set_allocated_srventergame(::lspb::SrvEnterGame* srventergame) {
  delete srventergame_;
  srventergame_ = srventergame;
  if (srventergame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lspb.SrvRes.srvEnterGame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace lspb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lspb::SrvMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lspb::SrvMsgType>() {
  return ::lspb::SrvMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_srvRes_2eproto__INCLUDED
